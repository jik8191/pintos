                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nicholas    Cho         ncho2@caltech.edu
Darius      Simmons     dsimmons@caltech.edu
Austin      Liu         yliu@caltech.edu

>> Specify how many late tokens you are using on this assignment:

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

               USER PROGRAMS
               =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument parsing was done with strtok_r(). In setup_stack() of
process.c, we tokenize the command string into an array of arguments
and the string which is the name of the program. The number of calls
to strtok_r() gives us the number of arguments. The arguments are then
pushed onto the stack using memcpy(), and we then round the stack
pointer down to the nearest multiple of four. The elements of argv[]
are pushed in reverse order, starting from argv[argc] which is set to
NULL (see 5.5.1 program startup details).

To prevent overflowing the stack page, we check the length of the
command string (which must be less than the page size based on the
initial strcpy() call) and the total number of arguments to determine
the number of bytes that will be occupied. We then ignore arguments as
necessary until the remainder fits on the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

As outlined in the manual page on strtok(), strtok() uses a static
buffer while parsing, so if a thread A initially calls strtok(),
followed by a thread B, another call to strtok() by thread A will pick
up the third token instead will get the third element in the list, not
the second.  strtok_r() avoids this problem by making the thread save
the save_ptr where it left off.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The executable name and arguments have separate uses and so separating
this in the shell is cleaner and avoids the need for the kernel to
manipulate the entire command string.

Additionally, this should make it easier to handle large numbers of
arguments, since the kernel can know beforehand how many arguments it
has to process.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When a process is created, the parent (spawning the child) creates a
child info struct (that the child will put its return status into) and
gives a pointer to that struct to its child. It then places this child
info struct into a list it maintains.

When wait is called, first we make sure that the tid that we called to
wait on is a child by looking through the list of child info structs,
which contain tid's. Then, if it is, first we remove the child info
struct from the list, so that we can only ever call wait on a process
once. Then, we get the child thread by its tid, and we check whether
the child has already terminated, which we know because we have a
`terminated` field in the child info struct that the child sets when
it terminates. If the child has not terminated, we sema_down on the
`child_wait` semaphore, which is initialized with a value of 0, so
that the parent is blocked. If the child has terminated, we simply
retrieve its return value and return from wait.

Finally, when the child thread terminates, it sets its return value in
the child info struct contained by its parent, and sets that it has
been terminated. When the thread is just about to exit, it then calls
sema_up on the `child_wait` semaphore, thus freeing up the parent
process, if any, that is waiting on it.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The thread that calls exec calls sema_down on a semaphore in the new
thread, so that it gets blocked until the new thread starts running.
The new thread will start, then upon attempting a load of the
executable, will set its load status, then sema_up on the semaphore,
allowing the parent thread to continue, now knowing the correct value
of the child's load status.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

              SURVEY QUESTIONS
              ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

