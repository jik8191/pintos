            +-----------------------+
            |         CS 124        |
            | PROJECT 2: BOOTLOADER |
            |    DESIGN DOCUMENT    |
            +-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nicholas    Cho         ncho2@caltech.edu
Darius      Simmons     darius.simmons05@gmail.com
Austin      Liu         yliu@caltech.edu

>> Specify how many late tokens you are using on this assignment: 0

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: login.cms.caltech.edu:/cs/courses/cs124/teams/Donbots
   commit 2e2ee984db3a3bbf5fde3be9e1aeba057f99afa4

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

https://en.wikipedia.org/wiki/
INT_13H#INT_13h_AH.3D42h:_Extended_Read_Sectors_From_Drive
https://en.wikipedia.org/wiki/Executable_and_Linkable_Format#File_header
http://www.osdever.net/bkerndev/Docs/idt.htm
http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT.html
https://en.wikipedia.org/wiki/Circular_buffer
http://wiki.osdev.org/Printing_To_Screen
http://www.strudel.org.uk/itoa/

                 PC BOOTER
                 =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

   Nick:    14
   Darius:  17
   Austin:  10

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

   Nick:   Cleaned up video code, timer and keyboard interrupts, fixing
           interrupt handlers, game state
   Darius: Bootstrapping code for the bootloader, video and keyboard
           functionality
   Austin: Bootstrapping code for the bootloader, interrupt
           descriptor table setup

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

                 GAME / DEMO
                 ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?

It loads the game program we want to run into memory and then passes
control of the processor to the game program.

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?

The user presses space to start a game and restart a game. The user uses 'A'
and 'D' to move the player avatar left and right.


---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.

The game maintains a set of global state variables. This includes the player
location, the state of the map (wall locations), and the state of the game (won,
lost, etc.).

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?


When an timer interrupt occurs, we suspend the program and call the interrupt
service routine (ISR) from the interrupt descriptor table (IDT). We maintain a
count and update the map and game time at regular intervals.

When an keyboard interrupt occurs, we suspend the program and call the
ISR from the IDT. We again update relevant state variables.

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?

No, we don't rely on polling.
The program waits for interrupts and performs all necessary tasks when it
receives the appropriate interrupt.

---- RATIONALE ----

>> A6: Why did you choose the project you did?

It was a game one of us had played a lot of before.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)

The game is a scrolling game, but did not require anything particularly
specialized, there were on specific implementation details necessary.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?

We wrote a random number generator and a memory set function (both available in
standard libraries).

                 BOOT SECTOR
                 ===========


---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?

We decided to store the Disk Address Packet on the stack, therefore, it should
be popped off and reclaimed after use.

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?

No information is passed.

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?

Our bootloader does one large load. It pushes the DAP onto the stack and then
calls the interupt to do the load.

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)

No

              VIDEO SUBSYSTEM
              ===============


---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)

We used text mode. The video buffer starts from 0xB8000. It is represented
by two bytes, where one byte is the char and the second is the color.


>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.

The only variables that we maintain are variables to the default colors. Just
wanted to keep a default background and foreground color.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

It provides abstractions to clear the screen, reset the colors to defaults,
make a color byte given the desired background and foreground. And the ability
to print chars and strings to any where on the screen.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?

We used colors in our program. We have a river that is blue. A shore that is
brown and green grass.

              TIMER SUBSYSTEM
              ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

The timer manages the count since the start of a new game. It uses this to
update the game world on timer updates at periodic intervals. It also maintains
state pertaining to how often we update the game world, etc.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The timer is more a function caller than anything. It contains information about
how our program is supposed to function and calls functions on periodic
intervals. Therefore, the rest of our program only needs to provide an interface
for the timer, rather than having to deal with time itself.

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?

No

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?


Yes, two interrupts might try to change the game state at the same time. We
disable interrupts while one timer interrupt was changing state to make sure
another wouldn't trigger in that time span. We also tried to make sure that in
general, this wasn't slowing down the speed of interrupts.

            KEYBOARD SUBSYSTEM
            ==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

The keyboard manages a circular queue of key presses. It enqueues key presses
whenever it receives one, then checks to see if the queue has any recognizable
sequence of key codes.

>> E2: How do your data structures handle keys with multi-byte scan-codes?

We don't currently need to recognize any multi-byte scan codes, but we have the
ability to since we are storing key presses in a ciruclar queue.

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The keyboard, like the timer, simply calls the appropriate functions upon
certain patterns. It makes it so that the rest of the program only needs to
expose the proper interface to the keyboard, rather than having to deal with
keypresses itself.

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.

It doesn't expose scan codes to the main program. It proprocesses them and then
calls functions based on the codee. The information exposed is that the player
should go right or left or that the game should start.


---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?

There is some possibility of conflicts; however, with the way we maintain a
queue, the worst that will happen is that some key presses would be dropped,
which isn't too big a concern with our game.

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?

Yes, but since the key press recognition depends on the state of the game, the
only two keyboard interrupts that can conflict and race are requests to move the
player left and right. If so, the result would be either that they cancel out,
or more likely, one of the movements is dropped.


---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?

We supported the circular queue because we thought we might need multi-byte scan
codes. Even though we didn't use the functionality, it leaves it open to
extensibility.

              SURVEY QUESTIONS
              ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

It took too long to figure out why interrupts were failing because the debugging
tools were poor.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

The bootloader.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

Debugging the interrupt handlers was a tedious experience.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?


